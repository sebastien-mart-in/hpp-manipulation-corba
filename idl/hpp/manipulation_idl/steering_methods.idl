// Copyright (c) 2019, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.


#ifndef HPP_MANIPULATION_STEERING_METHODS_IDL
#define HPP_MANIPULATION_STEERING_METHODS_IDL

#include "hpp/corbaserver/manipulation/gcommon.idl"
#include <hpp/common.idl>
#include <hpp/constraints_idl/constraints.idl>
#include <hpp/core_idl/steering_methods.idl>

module hpp {
  module constraints_idl {
    interface Implicit;
  };
  module core_idl {
    interface SteeringMethod;
    interface Path;
  };
  module manipulation_idl {
    module steeringMethod {
      interface EndEffectorTrajectory : core_idl::SteeringMethod
      {
        core_idl::Path makePiecewiseLinearTrajectory (in floatSeqSeq points, in floatSeq weights) raises (Error);
        void trajectoryConstraint (in constraints_idl::Implicit c) raises (Error);
        void trajectory (in core_idl::Path eeTraj, in boolean se3Output) raises (Error);
      }; // interface EndEffectorTrajectory

      interface EET_HERMITE : core_idl::SteeringMethod
      {
        core_idl::Path makePiecewiseLinearTrajectory (in floatSeqSeq points, in floatSeq weights) raises (Error);
        void trajectoryConstraint (in constraints_idl::Implicit c) raises (Error);
        void trajectory (in core_idl::Path eeTraj, in boolean se3Output) raises (Error);
      }; // interface EET_HERMITE
    }; // module steeringMethod
  }; // module manipulation
}; // module hpp

//* #include <hpp/constraints_idl/constraints.hh>
//* #include <hpp/core_idl/steering_methods.hh>
//* #include <hpp/manipulation/steering-method/end-effector-trajectory.hh>

#endif // HPP_MANIPULATION_STEERING_METHODS_IDL
