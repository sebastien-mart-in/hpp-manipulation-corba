// Copyright (C) 2020 by Joseph Mirabel, LAAS-CNRS.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.


#ifndef HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
#define HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
#include <hpp/common.idl>

#include <hpp/core_idl/path_planners.idl>
#include <hpp/manipulation_idl/_graph.idl>
#include <hpp/core_idl/paths.idl>


module hpp
{
  module core_idl {
    interface PathPlanner;
  }; // module core

  module manipulation_idl {
    interface Roadmap : core_idl::Roadmap {
      void constraintGraph (in graph_idl::Graph graph) raises (Error);
    }; // interface Roadmap

    module pathPlanner_idl {
      interface IkSolverInitialization
      {
      }; // interface IkSolverInitialization

      interface EndEffectorTrajectory : core_idl::PathPlanner
      {
        long getNRandomConfig (         ) raises (Error);
        //-> nRandomConfig
        void setNRandomConfig (in long n) raises (Error);
        //-> nRandomConfig

        long getNDiscreteSteps (         ) raises (Error);
        //-> nDiscreteSteps
        void setNDiscreteSteps (in long n) raises (Error);
        //-> nDiscreteSteps

        boolean getCheckFeasibilityOnly (            ) raises (Error);
        //-> checkFeasibilityOnly
        void    setCheckFeasibilityOnly (in boolean n) raises (Error);
        //-> checkFeasibilityOnly

        void setIkSolverInitialization (in IkSolverInitialization solver);
        //-> ikSolverInitialization
      }; // interface EndEffectorTrajectory

      interface EET_HERMITE : core_idl::PathPlanner
      {
        long getNRandomConfig (         ) raises (Error);
        //-> nRandomConfig
        void setNRandomConfig (in long n) raises (Error);
        //-> nRandomConfig

        long getNDiscreteSteps (         ) raises (Error);
        //-> nDiscreteSteps
        void setNDiscreteSteps (in long n) raises (Error);
        //-> nDiscreteSteps

        long get_M_value (         ) raises (Error);

        void set_M_value (in long M) raises (Error);

        boolean getCheckFeasibilityOnly (            ) raises (Error);
        //-> checkFeasibilityOnly
        void    setCheckFeasibilityOnly (in boolean n) raises (Error);
        //-> checkFeasibilityOnly

        void setIkSolverInitialization (in IkSolverInitialization solver);
        //-> ikSolverInitialization
      }; // interface EET_HERMITE
    }; // module pathPlanner_idl
  }; // module manipulation_idl
}; // module hpp

//* #include <hpp/manipulation/path-planner/end-effector-trajectory.hh>
//* #include <hpp/core_idl/paths.hh>
//* #include <hpp/core_idl/path_planners.hh>
//* #include <hpp/manipulation_idl/_graph-fwd.hh>
//* #include <hpp/manipulation/roadmap.hh>


#endif // HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
